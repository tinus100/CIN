name: CI Pipeline

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  build:
    runs-on: self-hosted

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=root --password=rootpassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, bcmath, gd, xml, pdo, tokenizer, xdebug
          coverage: xdebug

      # Step 3: Install dependencies
      - name: Install dependencies
        working-directory: laravel
        run: composer install --prefer-dist --no-scripts --no-progress --no-interaction

      # Step 4: Set up the .env file
      - name: Set up .env file
        working-directory: laravel
        run: cp .env.example .env

      # Step 5: Update database configuration for CI
      - name: Update database configuration
        working-directory: laravel
        run: |
          sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=mysql/' .env
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
          sed -i 's/DB_PORT=3306/DB_PORT=3306/' .env
          sed -i 's/DB_DATABASE=laravel/DB_DATABASE=testing/' .env
          sed -i 's/DB_USERNAME=root/DB_USERNAME=root/' .env
          sed -i 's/DB_PASSWORD=/DB_PASSWORD=rootpassword/' .env

      # Step 6: Generate application key
      - name: Generate application key
        working-directory: laravel
        run: php artisan key:generate

      # Step 7: Wait for MySQL to be ready
      - name: Wait for MySQL to be ready
        run: |
          while ! mysqladmin --user=root --password=rootpassword --host=127.0.0.1 --port=3306 ping --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 2
          done

      # Step 8: Run migrations
      - name: Run migrations
        working-directory: laravel
        run: php artisan migrate --env=testing --force

      # Step 9: Run Unit Tests and Generate Coverage Report
      - name: Run Unit Tests and Generate Coverage Report
        working-directory: laravel
        run: |
          if [ -f ./vendor/bin/phpunit ]; then
            ./vendor/bin/phpunit --configuration phpunit.xml --coverage-clover=coverage.xml
          else
            echo "PHPUnit not found in vendor, installing globally."
            composer global require phpunit/phpunit:^9.0
            ~/.composer/vendor/bin/phpunit --configuration phpunit.xml --coverage-clover=coverage.xml
          fi

      # Step 10: Verify Coverage Report Exists
      - name: Verify Coverage Report Exists
        working-directory: laravel
        run: ls -la

      # Step 11: Upload Coverage to Codecov
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      # Step 12: Set up JDK 11 for SonarQube
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Step 13: Install SonarQube Scanner
      - name: Install SonarQube Scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner-cli-4.6.2.2472-linux.zip
          mv sonar-scanner-4.6.2.2472-linux sonar-scanner
          export PATH=$PATH:$(pwd)/sonar-scanner/bin

      # Step 14: Run SonarQube Analysis
      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner -Dsonar.projectKey=project-cin \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
